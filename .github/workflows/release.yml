name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      auto_confirm:
        description: 'Auto-confirm all steps'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2'
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
      
      - name: Install GitHub CLI
        run: |
          brew install gh
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Make release script executable
        run: chmod +x scripts/release-automation.sh
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "release_type=tag" >> $GITHUB_OUTPUT
          else
            # Manual trigger - calculate version
            CURRENT_VERSION=$(./scripts/release-automation.sh --dry-run patch 2>&1 | grep "Current version:" | awk '{print $3}')
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            
            # Calculate next version
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case $RELEASE_TYPE in
              "major")
                VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch")
                VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          fi
      
      - name: Run tests
        run: |
          xcodebuild test \
            -project TinySteps.xcodeproj \
            -scheme TinySteps \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -derivedDataPath build
      
      - name: Build for release
        run: |
          xcodebuild archive \
            -project TinySteps.xcodeproj \
            -scheme TinySteps \
            -archivePath build/TinySteps.xcarchive \
            -derivedDataPath build
      
      - name: Create release branch
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "release/v${{ steps.version.outputs.version }}"
      
      - name: Update version
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Update Xcode project version
          sed -i '' "s/MARKETING_VERSION = [0-9]\+\.[0-9]\+\.[0-9]\+;/MARKETING_VERSION = ${{ steps.version.outputs.version }};/g" TinySteps.xcodeproj/project.pbxproj
          
          # Commit changes
          git add .
          git commit -m "Release v${{ steps.version.outputs.version }}"
          git push origin "release/v${{ steps.version.outputs.version }}"
      
      - name: Create pull request
        if: github.event_name == 'workflow_dispatch'
        run: |
          gh pr create \
            --title "Release v${{ steps.version.outputs.version }}" \
            --body "## Release v${{ steps.version.outputs.version }}

### Changes
- Version bump to ${{ steps.version.outputs.version }}
- Automated build and test
- Ready for review

### Checklist
- [x] Tests passing
- [x] Build successful
- [x] Version updated

### Auto-generated by GitHub Actions" \
            --base main \
            --head "release/v${{ steps.version.outputs.version }}"
      
      - name: Create GitHub release
        run: |
          # Generate release notes
          RELEASE_NOTES="## What's New in v${{ steps.version.outputs.version }}

### Features
- [Add features here]

### Bug Fixes
- [Add bug fixes here]

### Improvements
- [Add improvements here]

### Technical Changes
- Version bump to ${{ steps.version.outputs.version }}
- Automated release process

---

*This release was automatically generated by GitHub Actions.*"
          
          # Create release
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --body "$RELEASE_NOTES" \
            --target main
      
      - name: Merge to main
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.auto_confirm == 'true'
        run: |
          # Merge PR automatically
          PR_NUMBER=$(gh pr list --head "release/v${{ steps.version.outputs.version }}" --json number --jq '.[0].number')
          gh pr merge $PR_NUMBER --merge --delete-branch
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: TinySteps-${{ steps.version.outputs.version }}
          path: build/TinySteps.xcarchive
          retention-days: 30
      
      - name: Notify success
        if: success()
        run: |
          echo "‚úÖ Release v${{ steps.version.outputs.version }} completed successfully!"
          echo "üì± Build artifacts uploaded"
          echo "üè∑Ô∏è GitHub release created"
      
      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Release v${{ steps.version.outputs.version }} failed!"
          echo "üîç Check the logs for details" 