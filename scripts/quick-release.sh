#!/bin/bash

# Quick Release Script for TinySteps
# Simplified version for fast releases with auto-confirmation

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Get current version from Xcode project
get_current_version() {
    if [ -f "TinySteps.xcodeproj/project.pbxproj" ]; then
        grep -A 1 "MARKETING_VERSION" TinySteps.xcodeproj/project.pbxproj | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1
    else
        echo "0.0.0"
    fi
}

# Calculate next version
calculate_next_version() {
    local current_version=$1
    local release_type=$2
    
    IFS='.' read -ra VERSION_PARTS <<< "$current_version"
    local major=${VERSION_PARTS[0]}
    local minor=${VERSION_PARTS[1]}
    local patch=${VERSION_PARTS[2]}
    
    case $release_type in
        "major")
            echo "$((major + 1)).0.0"
            ;;
        "minor")
            echo "$major.$((minor + 1)).0"
            ;;
        "patch")
            echo "$major.$minor.$((patch + 1))"
            ;;
        *)
            echo "Invalid release type: $release_type"
            exit 1
            ;;
    esac
}

# Quick release function
quick_release() {
    local release_type=$1
    
    log_info "Starting quick release for type: $release_type"
    
    # Get current version
    local current_version=$(get_current_version)
    log_info "Current version: $current_version"
    
    # Calculate next version
    local next_version=$(calculate_next_version "$current_version" "$release_type")
    log_info "Next version: $next_version"
    
    # Update version in Xcode project
    log_info "Updating Xcode project version..."
    sed -i '' "s/MARKETING_VERSION = [0-9]\+\.[0-9]\+\.[0-9]\+;/MARKETING_VERSION = $next_version;/g" TinySteps.xcodeproj/project.pbxproj
    
    # Create release branch
    local branch_name="release/v$next_version"
    log_info "Creating release branch: $branch_name"
    git checkout -b "$branch_name"
    
    # Commit changes
    log_info "Committing changes..."
    git add .
    git commit -m "Release v$next_version"
    
    # Push changes
    log_info "Pushing changes..."
    git push origin "$branch_name"
    
    # Create pull request
    log_info "Creating pull request..."
    gh pr create \
        --title "Release v$next_version" \
        --body "## Release v$next_version

### Changes
- Version bump to $next_version
- Quick release automation

### Auto-generated by quick release script" \
        --base main \
        --head "$branch_name"
    
    # Create GitHub release
    log_info "Creating GitHub release..."
    gh release create "v$next_version" \
        --title "Release v$next_version" \
        --body "## What's New in v$next_version

### Changes
- Version bump to $next_version
- Quick release automation

---

*This release was automatically generated by the quick release script.*" \
        --target main
    
    # Merge to main
    log_info "Merging to main..."
    git checkout main
    git pull origin main
    git merge "$branch_name" --no-ff -m "Merge release v$next_version"
    git push origin main
    
    # Cleanup
    log_info "Cleaning up..."
    git branch -d "$branch_name" 2>/dev/null || true
    git push origin --delete "$branch_name" 2>/dev/null || true
    
    log_success "Quick release v$next_version completed!"
    log_info "Branch: $branch_name"
    log_info "Pull request and GitHub release created"
}

# Show usage
usage() {
    echo "Usage: $0 <release_type>"
    echo ""
    echo "Release types:"
    echo "  major    - Increment major version (1.0.0 -> 2.0.0)"
    echo "  minor    - Increment minor version (1.0.0 -> 1.1.0)"
    echo "  patch    - Increment patch version (1.0.0 -> 1.0.1)"
    echo ""
    echo "Examples:"
    echo "  $0 patch    # Quick patch release"
    echo "  $0 minor    # Quick minor release"
    echo "  $0 major    # Quick major release"
}

# Check arguments
if [ $# -eq 0 ]; then
    usage
    exit 1
fi

case $1 in
    major|minor|patch)
        quick_release $1
        ;;
    --help|-h)
        usage
        exit 0
        ;;
    *)
        echo "Error: Invalid release type '$1'"
        usage
        exit 1
        ;;
esac 