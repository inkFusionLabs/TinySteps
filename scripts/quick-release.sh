#!/bin/bash

# Quick Release Script for TinySteps
# Simplified version for fast releases with auto-confirmation
# 
# WARNING: This script automatically:
# - Creates a release branch
# - Updates version numbers
# - Creates a pull request
# - Creates a GitHub release
# - Merges to main
# - Cleans up branches
# 
# Use --dry-run to test before running for real.

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Get current version from Xcode project
get_current_version() {
    if [ -f "TinySteps.xcodeproj/project.pbxproj" ]; then
        local version=$(grep -A 1 "MARKETING_VERSION" TinySteps.xcodeproj/project.pbxproj | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
        if [ -n "$version" ]; then
            echo "$version"
        else
            echo "0.0.0"
        fi
    else
        echo "0.0.0"
    fi
}

# Calculate next version
calculate_next_version() {
    local current_version=$1
    local release_type=$2
    
    IFS='.' read -ra VERSION_PARTS <<< "$current_version"
    local major=${VERSION_PARTS[0]}
    local minor=${VERSION_PARTS[1]}
    local patch=${VERSION_PARTS[2]}
    
    case $release_type in
        "major")
            echo "$((major + 1)).0.0"
            ;;
        "minor")
            echo "$major.$((minor + 1)).0"
            ;;
        "patch")
            echo "$major.$minor.$((patch + 1))"
            ;;
        *)
            echo "Invalid release type: $release_type"
            exit 1
            ;;
    esac
}

# Quick release function
quick_release() {
    local release_type=$1
    
    # Validate we're in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "Error: Not in a git repository"
        exit 1
    fi
    
    # Check if gh CLI is available
    if ! command -v gh &> /dev/null; then
        echo "Error: GitHub CLI (gh) is not installed. Please install it first."
        exit 1
    fi
    
    # Check if authenticated with GitHub
    if ! gh auth status &> /dev/null; then
        echo "Error: Not authenticated with GitHub. Please run 'gh auth login' first."
        exit 1
    fi
    
    log_info "Starting quick release for type: $release_type"
    
    # Get current version
    local current_version=$(get_current_version)
    if [ "$current_version" = "0.0.0" ]; then
        echo "Error: Could not determine current version. Make sure you're in the TinySteps project directory."
        exit 1
    fi
    log_info "Current version: $current_version"
    
    # Calculate next version
    local next_version=$(calculate_next_version "$current_version" "$release_type")
    log_info "Next version: $next_version"
    
    # Check for uncommitted changes
    if ! git diff-index --quiet HEAD --; then
        echo "Error: You have uncommitted changes. Please commit or stash them before releasing."
        exit 1
    fi
    
    # Update version in Xcode project
    log_info "Updating Xcode project version..."
    sed -i '' "s/MARKETING_VERSION = [0-9]\+\.[0-9]\+\.[0-9]\+;/MARKETING_VERSION = $next_version;/g" TinySteps.xcodeproj/project.pbxproj
    
    # Create release branch
    local branch_name="release/v$next_version"
    log_info "Creating release branch: $branch_name"
    git checkout -b "$branch_name" || {
        echo "Error: Failed to create release branch"
        exit 1
    }
    
    # Commit changes
    log_info "Committing changes..."
    git add . || {
        echo "Error: Failed to stage changes"
        exit 1
    }
    git commit -m "Release v$next_version" || {
        echo "Error: Failed to commit changes"
        exit 1
    }
    
    # Push changes
    log_info "Pushing changes..."
    git push origin "$branch_name" || {
        echo "Error: Failed to push changes"
        exit 1
    }
    
    # Create pull request
    log_info "Creating pull request..."
    gh pr create \
        --title "Release v$next_version" \
        --body "## Release v$next_version

### Changes
- Version bump to $next_version
- Quick release automation

### Auto-generated by quick release script" \
        --base main \
        --head "$branch_name" || {
        echo "Error: Failed to create pull request"
        exit 1
    }
    
    # Create GitHub release
    log_info "Creating GitHub release..."
    gh release create "v$next_version" \
        --title "Release v$next_version" \
        --body "## What's New in v$next_version

### Changes
- Version bump to $next_version
- Quick release automation

---

*This release was automatically generated by the quick release script.*" \
        --target main || {
        echo "Error: Failed to create GitHub release"
        exit 1
    }
    
    # Merge to main
    log_info "Merging to main..."
    git checkout main || {
        echo "Error: Failed to checkout main branch"
        exit 1
    }
    git pull origin main || {
        echo "Error: Failed to pull latest changes from main"
        exit 1
    }
    git merge "$branch_name" --no-ff -m "Merge release v$next_version" || {
        echo "Error: Failed to merge release branch"
        exit 1
    }
    git push origin main || {
        echo "Error: Failed to push merged changes to main"
        exit 1
    }
    
    # Cleanup
    log_info "Cleaning up..."
    git branch -d "$branch_name" 2>/dev/null || true
    git push origin --delete "$branch_name" 2>/dev/null || true
    
    log_success "Quick release v$next_version completed!"
    log_info "Branch: $branch_name"
    log_info "Pull request and GitHub release created"
}

# Show usage
usage() {
    echo "Usage: $0 <release_type> [options]"
    echo ""
    echo "Release types:"
    echo "  major    - Increment major version (1.0.0 -> 2.0.0)"
    echo "  minor    - Increment minor version (1.0.0 -> 1.1.0)"
    echo "  patch    - Increment patch version (1.0.0 -> 1.0.1)"
    echo ""
    echo "Options:"
    echo "  --dry-run    - Show what would be done without making changes"
    echo "  --help, -h   - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 patch         # Quick patch release"
    echo "  $0 minor         # Quick minor release"
    echo "  $0 major         # Quick major release"
    echo "  $0 patch --dry-run  # Test patch release without making changes"
}

# Parse arguments
DRY_RUN=false
RELEASE_TYPE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        major|minor|patch)
            RELEASE_TYPE="$1"
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            echo "Error: Invalid argument '$1'"
            usage
            exit 1
            ;;
    esac
done

# Check if release type was provided
if [ -z "$RELEASE_TYPE" ]; then
    echo "Error: Release type is required"
    usage
    exit 1
fi

# Run dry run or actual release
if [ "$DRY_RUN" = true ]; then
    echo "=== DRY RUN MODE ==="
    echo "Would perform $RELEASE_TYPE release"
    echo "Current version: $(get_current_version)"
    echo "Next version: $(calculate_next_version "$(get_current_version)" "$RELEASE_TYPE")"
    echo "Would create branch: release/v$(calculate_next_version "$(get_current_version)" "$RELEASE_TYPE")"
    echo "Would create pull request and GitHub release"
    echo "=== END DRY RUN ==="
else
    quick_release "$RELEASE_TYPE"
fi 